/**
 * virusapi
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CloudStorageAdvancedVirusScanResult', 'model/CloudStorageVirusScanResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CloudStorageAdvancedVirusScanResult'), require('../model/CloudStorageVirusScanResult'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudmersiveVirusApiClient) {
      root.CloudmersiveVirusApiClient = {};
    }
    root.CloudmersiveVirusApiClient.ScanCloudStorageApi = factory(root.CloudmersiveVirusApiClient.ApiClient, root.CloudmersiveVirusApiClient.CloudStorageAdvancedVirusScanResult, root.CloudmersiveVirusApiClient.CloudStorageVirusScanResult);
  }
}(this, function(ApiClient, CloudStorageAdvancedVirusScanResult, CloudStorageVirusScanResult) {
  'use strict';

  /**
   * ScanCloudStorage service.
   * @module api/ScanCloudStorageApi
   * @version 1.2.7
   */

  /**
   * Constructs a new ScanCloudStorageApi. 
   * @alias module:api/ScanCloudStorageApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the scanCloudStorageScanAwsS3File operation.
     * @callback module:api/ScanCloudStorageApi~scanCloudStorageScanAwsS3FileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudStorageVirusScanResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scan an AWS S3 file for viruses
     * Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
     * @param {String} accessKey AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console
     * @param {String} secretKey AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console
     * @param {String} bucketRegion Name of the region of the S3 bucket, such as &#39;US-East-1&#39;
     * @param {String} bucketName Name of the S3 bucket
     * @param {String} keyName Key name (also called file name) of the file in S3 that you wish to scan for viruses.  If the key name contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.
     * @param {module:api/ScanCloudStorageApi~scanCloudStorageScanAwsS3FileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudStorageVirusScanResult}
     */
    this.scanCloudStorageScanAwsS3File = function(accessKey, secretKey, bucketRegion, bucketName, keyName, callback) {
      var postBody = null;

      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling scanCloudStorageScanAwsS3File");
      }

      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling scanCloudStorageScanAwsS3File");
      }

      // verify the required parameter 'bucketRegion' is set
      if (bucketRegion === undefined || bucketRegion === null) {
        throw new Error("Missing the required parameter 'bucketRegion' when calling scanCloudStorageScanAwsS3File");
      }

      // verify the required parameter 'bucketName' is set
      if (bucketName === undefined || bucketName === null) {
        throw new Error("Missing the required parameter 'bucketName' when calling scanCloudStorageScanAwsS3File");
      }

      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling scanCloudStorageScanAwsS3File");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'bucketRegion': bucketRegion,
        'bucketName': bucketName,
        'keyName': keyName
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = CloudStorageVirusScanResult;

      return this.apiClient.callApi(
        '/virus/scan/cloud-storage/aws-s3/single', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scanCloudStorageScanAwsS3FileAdvanced operation.
     * @callback module:api/ScanCloudStorageApi~scanCloudStorageScanAwsS3FileAdvancedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudStorageAdvancedVirusScanResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Advanced Scan an AWS S3 file for viruses
     * Advanced Scan the contents of a single AWS S3 file and its content for viruses and threats. Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
     * @param {String} accessKey AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console
     * @param {String} secretKey AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console
     * @param {String} bucketRegion Name of the region of the S3 bucket, such as &#39;US-East-1&#39;
     * @param {String} bucketName Name of the S3 bucket
     * @param {String} keyName Key name (also called file name) of the file in S3 that you wish to scan for viruses.  If the key name contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.allowExecutables Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended).
     * @param {Boolean} opts.allowInvalidFiles Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended).
     * @param {Boolean} opts.allowScripts Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended).
     * @param {Boolean} opts.allowPasswordProtectedFiles Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended).
     * @param {Boolean} opts.allowMacros Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended).
     * @param {Boolean} opts.allowXmlExternalEntities Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended).
     * @param {Boolean} opts.allowInsecureDeserialization Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended).
     * @param {Boolean} opts.allowHtml Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability].
     * @param {String} opts.restrictFileTypes Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled.
     * @param {module:api/ScanCloudStorageApi~scanCloudStorageScanAwsS3FileAdvancedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudStorageAdvancedVirusScanResult}
     */
    this.scanCloudStorageScanAwsS3FileAdvanced = function(accessKey, secretKey, bucketRegion, bucketName, keyName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling scanCloudStorageScanAwsS3FileAdvanced");
      }

      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling scanCloudStorageScanAwsS3FileAdvanced");
      }

      // verify the required parameter 'bucketRegion' is set
      if (bucketRegion === undefined || bucketRegion === null) {
        throw new Error("Missing the required parameter 'bucketRegion' when calling scanCloudStorageScanAwsS3FileAdvanced");
      }

      // verify the required parameter 'bucketName' is set
      if (bucketName === undefined || bucketName === null) {
        throw new Error("Missing the required parameter 'bucketName' when calling scanCloudStorageScanAwsS3FileAdvanced");
      }

      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling scanCloudStorageScanAwsS3FileAdvanced");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'bucketRegion': bucketRegion,
        'bucketName': bucketName,
        'keyName': keyName,
        'allowExecutables': opts['allowExecutables'],
        'allowInvalidFiles': opts['allowInvalidFiles'],
        'allowScripts': opts['allowScripts'],
        'allowPasswordProtectedFiles': opts['allowPasswordProtectedFiles'],
        'allowMacros': opts['allowMacros'],
        'allowXmlExternalEntities': opts['allowXmlExternalEntities'],
        'allowInsecureDeserialization': opts['allowInsecureDeserialization'],
        'allowHtml': opts['allowHtml'],
        'restrictFileTypes': opts['restrictFileTypes']
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = CloudStorageAdvancedVirusScanResult;

      return this.apiClient.callApi(
        '/virus/scan/cloud-storage/aws-s3/single/advanced', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scanCloudStorageScanAzureBlob operation.
     * @callback module:api/ScanCloudStorageApi~scanCloudStorageScanAzureBlobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudStorageVirusScanResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scan an Azure Blob for viruses
     * Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
     * @param {String} connectionString Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.
     * @param {String} containerName Name of the Blob container within the Azure Blob Storage account
     * @param {String} blobPath Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.
     * @param {module:api/ScanCloudStorageApi~scanCloudStorageScanAzureBlobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudStorageVirusScanResult}
     */
    this.scanCloudStorageScanAzureBlob = function(connectionString, containerName, blobPath, callback) {
      var postBody = null;

      // verify the required parameter 'connectionString' is set
      if (connectionString === undefined || connectionString === null) {
        throw new Error("Missing the required parameter 'connectionString' when calling scanCloudStorageScanAzureBlob");
      }

      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling scanCloudStorageScanAzureBlob");
      }

      // verify the required parameter 'blobPath' is set
      if (blobPath === undefined || blobPath === null) {
        throw new Error("Missing the required parameter 'blobPath' when calling scanCloudStorageScanAzureBlob");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'connectionString': connectionString,
        'containerName': containerName,
        'blobPath': blobPath
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = CloudStorageVirusScanResult;

      return this.apiClient.callApi(
        '/virus/scan/cloud-storage/azure-blob/single', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scanCloudStorageScanAzureBlobAdvanced operation.
     * @callback module:api/ScanCloudStorageApi~scanCloudStorageScanAzureBlobAdvancedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudStorageAdvancedVirusScanResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Advanced Scan an Azure Blob for viruses
     * Advanced Scan the contents of a single Azure Blob and its content for viruses and threats.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
     * @param {String} connectionString Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.
     * @param {String} containerName Name of the Blob container within the Azure Blob Storage account
     * @param {String} blobPath Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.allowExecutables Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended).
     * @param {Boolean} opts.allowInvalidFiles Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended).
     * @param {Boolean} opts.allowScripts Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended).
     * @param {Boolean} opts.allowPasswordProtectedFiles Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended).
     * @param {Boolean} opts.allowMacros Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended).
     * @param {Boolean} opts.allowXmlExternalEntities Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended).
     * @param {Boolean} opts.allowInsecureDeserialization Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended).
     * @param {Boolean} opts.allowHtml Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability].
     * @param {String} opts.restrictFileTypes Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled.
     * @param {module:api/ScanCloudStorageApi~scanCloudStorageScanAzureBlobAdvancedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudStorageAdvancedVirusScanResult}
     */
    this.scanCloudStorageScanAzureBlobAdvanced = function(connectionString, containerName, blobPath, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'connectionString' is set
      if (connectionString === undefined || connectionString === null) {
        throw new Error("Missing the required parameter 'connectionString' when calling scanCloudStorageScanAzureBlobAdvanced");
      }

      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling scanCloudStorageScanAzureBlobAdvanced");
      }

      // verify the required parameter 'blobPath' is set
      if (blobPath === undefined || blobPath === null) {
        throw new Error("Missing the required parameter 'blobPath' when calling scanCloudStorageScanAzureBlobAdvanced");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'connectionString': connectionString,
        'containerName': containerName,
        'blobPath': blobPath,
        'allowExecutables': opts['allowExecutables'],
        'allowInvalidFiles': opts['allowInvalidFiles'],
        'allowScripts': opts['allowScripts'],
        'allowPasswordProtectedFiles': opts['allowPasswordProtectedFiles'],
        'allowMacros': opts['allowMacros'],
        'allowXmlExternalEntities': opts['allowXmlExternalEntities'],
        'allowInsecureDeserialization': opts['allowInsecureDeserialization'],
        'allowHtml': opts['allowHtml'],
        'restrictFileTypes': opts['restrictFileTypes']
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = CloudStorageAdvancedVirusScanResult;

      return this.apiClient.callApi(
        '/virus/scan/cloud-storage/azure-blob/single/advanced', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scanCloudStorageScanGcpStorageFile operation.
     * @callback module:api/ScanCloudStorageApi~scanCloudStorageScanGcpStorageFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudStorageVirusScanResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scan an Google Cloud Platform (GCP) Storage file for viruses
     * Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
     * @param {String} bucketName Name of the bucket in Google Cloud Storage
     * @param {String} objectName Name of the object or file in Google Cloud Storage.  If the object name contains Unicode characters, you must base64 encode the object name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.
     * @param {File} jsonCredentialFile Service Account credential for Google Cloud stored in a JSON file.
     * @param {module:api/ScanCloudStorageApi~scanCloudStorageScanGcpStorageFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudStorageVirusScanResult}
     */
    this.scanCloudStorageScanGcpStorageFile = function(bucketName, objectName, jsonCredentialFile, callback) {
      var postBody = null;

      // verify the required parameter 'bucketName' is set
      if (bucketName === undefined || bucketName === null) {
        throw new Error("Missing the required parameter 'bucketName' when calling scanCloudStorageScanGcpStorageFile");
      }

      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling scanCloudStorageScanGcpStorageFile");
      }

      // verify the required parameter 'jsonCredentialFile' is set
      if (jsonCredentialFile === undefined || jsonCredentialFile === null) {
        throw new Error("Missing the required parameter 'jsonCredentialFile' when calling scanCloudStorageScanGcpStorageFile");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'bucketName': bucketName,
        'objectName': objectName
      };
      var formParams = {
        'jsonCredentialFile': jsonCredentialFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = CloudStorageVirusScanResult;

      return this.apiClient.callApi(
        '/virus/scan/cloud-storage/gcp-storage/single', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scanCloudStorageScanGcpStorageFileAdvanced operation.
     * @callback module:api/ScanCloudStorageApi~scanCloudStorageScanGcpStorageFileAdvancedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudStorageAdvancedVirusScanResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Advanced Scan an Google Cloud Platform (GCP) Storage file for viruses
     * Advanced Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses and threats. Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
     * @param {String} bucketName Name of the bucket in Google Cloud Storage
     * @param {String} objectName Name of the object or file in Google Cloud Storage.  If the object name contains Unicode characters, you must base64 encode the object name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.
     * @param {File} jsonCredentialFile Service Account credential for Google Cloud stored in a JSON file.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.allowExecutables Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended).
     * @param {Boolean} opts.allowInvalidFiles Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended).
     * @param {Boolean} opts.allowScripts Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended).
     * @param {Boolean} opts.allowPasswordProtectedFiles Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended).
     * @param {Boolean} opts.allowMacros Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended).
     * @param {Boolean} opts.allowXmlExternalEntities Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended).
     * @param {Boolean} opts.allowInsecureDeserialization Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended).
     * @param {Boolean} opts.allowHtml Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability].
     * @param {String} opts.restrictFileTypes Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled.
     * @param {module:api/ScanCloudStorageApi~scanCloudStorageScanGcpStorageFileAdvancedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudStorageAdvancedVirusScanResult}
     */
    this.scanCloudStorageScanGcpStorageFileAdvanced = function(bucketName, objectName, jsonCredentialFile, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'bucketName' is set
      if (bucketName === undefined || bucketName === null) {
        throw new Error("Missing the required parameter 'bucketName' when calling scanCloudStorageScanGcpStorageFileAdvanced");
      }

      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling scanCloudStorageScanGcpStorageFileAdvanced");
      }

      // verify the required parameter 'jsonCredentialFile' is set
      if (jsonCredentialFile === undefined || jsonCredentialFile === null) {
        throw new Error("Missing the required parameter 'jsonCredentialFile' when calling scanCloudStorageScanGcpStorageFileAdvanced");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'bucketName': bucketName,
        'objectName': objectName,
        'allowExecutables': opts['allowExecutables'],
        'allowInvalidFiles': opts['allowInvalidFiles'],
        'allowScripts': opts['allowScripts'],
        'allowPasswordProtectedFiles': opts['allowPasswordProtectedFiles'],
        'allowMacros': opts['allowMacros'],
        'allowXmlExternalEntities': opts['allowXmlExternalEntities'],
        'allowInsecureDeserialization': opts['allowInsecureDeserialization'],
        'allowHtml': opts['allowHtml'],
        'restrictFileTypes': opts['restrictFileTypes']
      };
      var formParams = {
        'jsonCredentialFile': jsonCredentialFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = CloudStorageAdvancedVirusScanResult;

      return this.apiClient.callApi(
        '/virus/scan/cloud-storage/gcp-storage/single/advanced', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scanCloudStorageScanSharePointOnlineFile operation.
     * @callback module:api/ScanCloudStorageApi~scanCloudStorageScanSharePointOnlineFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudStorageVirusScanResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Virus Scan a file in a SharePoint Online Site Drive
     * Virus Scan the contents of a single SharePoint Online Site Drive file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time. To get the Client ID and Client Secret, follow these steps: (1) Navigate to the Azure Portal and click on Azure Active Directory, (2) click on App Registrations on the left hand side, (3) click on Register Application, (4) Name the application CloudmersiveAntiVirus and click on Register, (5) Get the client ID by clicking on Overview and copying the value labeled Application (client) ID, (6) click on Certificates and Secrets, (7) click on New client secret, choose a longer expiration and give the secret a name, (8) copy the secret value to the clipboard and save it securely, this is your Client Secret, (9) Now we need to grant permissions to SharePOint; click on API Permissions on the left hand side, (10) click on Add a permission and choose Microsoft Graph, (11) click on Application Permissions, (12) search for Sites.FullControl.All, (13) Click on Add Permissions, (14) now navigate back to Azure Active Directory and click on Enterprise Applications, click on CloudmersiveAntiVirus and click on Permissions, and (15) click on Grant Admin Consent.
     * @param {String} clientID Client ID access credentials; see description above for instructions on how to get the Client ID from the Azure Active Directory portal.
     * @param {String} clientSecret Client Secret access credentials; see description above for instructions on how to get the Client Secret from the Azure Active Directory portal
     * @param {String} sharepointDomainName SharePoint Online domain name, such as mydomain.sharepoint.com
     * @param {String} siteID Site ID (GUID) of the SharePoint site you wish to retrieve the file from
     * @param {String} filePath Path to the file within the drive, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the file path contains Unicode characters, you must base64 encode the file path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.
     * @param {Object} opts Optional parameters
     * @param {String} opts.tenantID Optional; Tenant ID of your Azure Active Directory
     * @param {String} opts.itemID SharePoint itemID, such as a DriveItem Id
     * @param {module:api/ScanCloudStorageApi~scanCloudStorageScanSharePointOnlineFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudStorageVirusScanResult}
     */
    this.scanCloudStorageScanSharePointOnlineFile = function(clientID, clientSecret, sharepointDomainName, siteID, filePath, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientID' is set
      if (clientID === undefined || clientID === null) {
        throw new Error("Missing the required parameter 'clientID' when calling scanCloudStorageScanSharePointOnlineFile");
      }

      // verify the required parameter 'clientSecret' is set
      if (clientSecret === undefined || clientSecret === null) {
        throw new Error("Missing the required parameter 'clientSecret' when calling scanCloudStorageScanSharePointOnlineFile");
      }

      // verify the required parameter 'sharepointDomainName' is set
      if (sharepointDomainName === undefined || sharepointDomainName === null) {
        throw new Error("Missing the required parameter 'sharepointDomainName' when calling scanCloudStorageScanSharePointOnlineFile");
      }

      // verify the required parameter 'siteID' is set
      if (siteID === undefined || siteID === null) {
        throw new Error("Missing the required parameter 'siteID' when calling scanCloudStorageScanSharePointOnlineFile");
      }

      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling scanCloudStorageScanSharePointOnlineFile");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'clientID': clientID,
        'clientSecret': clientSecret,
        'sharepointDomainName': sharepointDomainName,
        'siteID': siteID,
        'tenantID': opts['tenantID'],
        'filePath': filePath,
        'itemID': opts['itemID']
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = CloudStorageVirusScanResult;

      return this.apiClient.callApi(
        '/virus/scan/cloud-storage/sharepoint-online/site/single', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scanCloudStorageScanSharePointOnlineFileAdvanced operation.
     * @callback module:api/ScanCloudStorageApi~scanCloudStorageScanSharePointOnlineFileAdvancedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudStorageAdvancedVirusScanResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Advanced Virus Scan a file in a SharePoint Online Site Drive
     * Advanced Virus Scan the contents of a single SharePoint Online Site Drive file and its content for viruses and threats.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time. To get the Client ID and Client Secret, follow these steps: (1) Navigate to the Azure Portal and click on Azure Active Directory, (2) click on App Registrations on the left hand side, (3) click on Register Application, (4) Name the application CloudmersiveAntiVirus and click on Register, (5) Get the client ID by clicking on Overview and copying the value labeled Application (client) ID, (6) click on Certificates and Secrets, (7) click on New client secret, choose a longer expiration and give the secret a name, (8) copy the secret value to the clipboard and save it securely, this is your Client Secret, (9) Now we need to grant permissions to SharePOint; click on API Permissions on the left hand side, (10) click on Add a permission and choose Microsoft Graph, (11) click on Application Permissions, (12) search for Sites.FullControl.All, (13) Click on Add Permissions, (14) now navigate back to Azure Active Directory and click on Enterprise Applications, click on CloudmersiveAntiVirus and click on Permissions, and (15) click on Grant Admin Consent.
     * @param {String} clientID Client ID access credentials; see description above for instructions on how to get the Client ID from the Azure Active Directory portal.
     * @param {String} clientSecret Client Secret access credentials; see description above for instructions on how to get the Client Secret from the Azure Active Directory portal
     * @param {String} sharepointDomainName SharePoint Online domain name, such as mydomain.sharepoint.com
     * @param {String} siteID Site ID (GUID) of the SharePoint site you wish to retrieve the file from
     * @param {Object} opts Optional parameters
     * @param {String} opts.tenantID Optional; Tenant ID of your Azure Active Directory
     * @param {String} opts.filePath Path to the file within the drive, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the file path contains Unicode characters, you must base64 encode the file path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.
     * @param {String} opts.itemID SharePoint itemID, such as a DriveItem Id
     * @param {Boolean} opts.allowExecutables Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended).
     * @param {Boolean} opts.allowInvalidFiles Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended).
     * @param {Boolean} opts.allowScripts Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended).
     * @param {Boolean} opts.allowPasswordProtectedFiles Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended).
     * @param {Boolean} opts.allowMacros Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended).
     * @param {Boolean} opts.allowXmlExternalEntities Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended).
     * @param {Boolean} opts.allowInsecureDeserialization Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended).
     * @param {Boolean} opts.allowHtml Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability].
     * @param {String} opts.restrictFileTypes Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled.
     * @param {module:api/ScanCloudStorageApi~scanCloudStorageScanSharePointOnlineFileAdvancedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudStorageAdvancedVirusScanResult}
     */
    this.scanCloudStorageScanSharePointOnlineFileAdvanced = function(clientID, clientSecret, sharepointDomainName, siteID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientID' is set
      if (clientID === undefined || clientID === null) {
        throw new Error("Missing the required parameter 'clientID' when calling scanCloudStorageScanSharePointOnlineFileAdvanced");
      }

      // verify the required parameter 'clientSecret' is set
      if (clientSecret === undefined || clientSecret === null) {
        throw new Error("Missing the required parameter 'clientSecret' when calling scanCloudStorageScanSharePointOnlineFileAdvanced");
      }

      // verify the required parameter 'sharepointDomainName' is set
      if (sharepointDomainName === undefined || sharepointDomainName === null) {
        throw new Error("Missing the required parameter 'sharepointDomainName' when calling scanCloudStorageScanSharePointOnlineFileAdvanced");
      }

      // verify the required parameter 'siteID' is set
      if (siteID === undefined || siteID === null) {
        throw new Error("Missing the required parameter 'siteID' when calling scanCloudStorageScanSharePointOnlineFileAdvanced");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'clientID': clientID,
        'clientSecret': clientSecret,
        'sharepointDomainName': sharepointDomainName,
        'siteID': siteID,
        'tenantID': opts['tenantID'],
        'filePath': opts['filePath'],
        'itemID': opts['itemID'],
        'allowExecutables': opts['allowExecutables'],
        'allowInvalidFiles': opts['allowInvalidFiles'],
        'allowScripts': opts['allowScripts'],
        'allowPasswordProtectedFiles': opts['allowPasswordProtectedFiles'],
        'allowMacros': opts['allowMacros'],
        'allowXmlExternalEntities': opts['allowXmlExternalEntities'],
        'allowInsecureDeserialization': opts['allowInsecureDeserialization'],
        'allowHtml': opts['allowHtml'],
        'restrictFileTypes': opts['restrictFileTypes']
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = CloudStorageAdvancedVirusScanResult;

      return this.apiClient.callApi(
        '/virus/scan/cloud-storage/sharepoint-online/site/advanced', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
