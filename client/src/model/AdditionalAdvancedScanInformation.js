/*
 * virusapi
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.46
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudmersiveVirusApiClient) {
      root.CloudmersiveVirusApiClient = {};
    }
    root.CloudmersiveVirusApiClient.AdditionalAdvancedScanInformation = factory(root.CloudmersiveVirusApiClient.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The AdditionalAdvancedScanInformation model module.
   * @module model/AdditionalAdvancedScanInformation
   * @version 1.3.1
   */

  /**
   * Constructs a new <code>AdditionalAdvancedScanInformation</code>.
   * Additional non-threat content verification information
   * @alias module:model/AdditionalAdvancedScanInformation
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>AdditionalAdvancedScanInformation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AdditionalAdvancedScanInformation} obj Optional instance to populate.
   * @return {module:model/AdditionalAdvancedScanInformation} The populated <code>AdditionalAdvancedScanInformation</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('ContainsJSON'))
        obj.containsJSON = ApiClient.convertToType(data['ContainsJSON'], 'Boolean');
      if (data.hasOwnProperty('ContainsXML'))
        obj.containsXML = ApiClient.convertToType(data['ContainsXML'], 'Boolean');
      if (data.hasOwnProperty('ContainsImage'))
        obj.containsImage = ApiClient.convertToType(data['ContainsImage'], 'Boolean');
      if (data.hasOwnProperty('Hash_SHA1'))
        obj.hashSHA1 = ApiClient.convertToType(data['Hash_SHA1'], 'String');
      if (data.hasOwnProperty('RelevantSubfileName'))
        obj.relevantSubfileName = ApiClient.convertToType(data['RelevantSubfileName'], 'String');
      if (data.hasOwnProperty('RelevantSubfileHash_SHA1'))
        obj.relevantSubfileHashSHA1 = ApiClient.convertToType(data['RelevantSubfileHash_SHA1'], 'String');
      if (data.hasOwnProperty('IsAuthenticodeSigned'))
        obj.isAuthenticodeSigned = ApiClient.convertToType(data['IsAuthenticodeSigned'], 'Boolean');
    }
    return obj;
  }

  /**
   * True if the input file contains JSON data, false otherwise; this is not a threat signal
   * @member {Boolean} containsJSON
   */
  exports.prototype.containsJSON = undefined;

  /**
   * True if the input file contains XML data, false otherwise; this is not a threat signal
   * @member {Boolean} containsXML
   */
  exports.prototype.containsXML = undefined;

  /**
   * True if the input file contains an image
   * @member {Boolean} containsImage
   */
  exports.prototype.containsImage = undefined;

  /**
   * SHA1 hash of input file
   * @member {String} hashSHA1
   */
  exports.prototype.hashSHA1 = undefined;

  /**
   * Relevant subfile name in an archive format for identified threats, if any
   * @member {String} relevantSubfileName
   */
  exports.prototype.relevantSubfileName = undefined;

  /**
   * SHA1 hash of relevant subfile name in an archive format for identified threats, if any
   * @member {String} relevantSubfileHashSHA1
   */
  exports.prototype.relevantSubfileHashSHA1 = undefined;

  /**
   * True if there is a valid Authenticode signature, False otherwise
   * @member {Boolean} isAuthenticodeSigned
   */
  exports.prototype.isAuthenticodeSigned = undefined;


  return exports;

}));
