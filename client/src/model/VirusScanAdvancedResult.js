/*
 * virusapi
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.46
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AdditionalAdvancedScanInformation', 'model/VirusFound'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AdditionalAdvancedScanInformation'), require('./VirusFound'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudmersiveVirusApiClient) {
      root.CloudmersiveVirusApiClient = {};
    }
    root.CloudmersiveVirusApiClient.VirusScanAdvancedResult = factory(root.CloudmersiveVirusApiClient.ApiClient, root.CloudmersiveVirusApiClient.AdditionalAdvancedScanInformation, root.CloudmersiveVirusApiClient.VirusFound);
  }
}(this, function(ApiClient, AdditionalAdvancedScanInformation, VirusFound) {
  'use strict';

  /**
   * The VirusScanAdvancedResult model module.
   * @module model/VirusScanAdvancedResult
   * @version 1.3.1
   */

  /**
   * Constructs a new <code>VirusScanAdvancedResult</code>.
   * Result of running an advanced virus scan
   * @alias module:model/VirusScanAdvancedResult
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>VirusScanAdvancedResult</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/VirusScanAdvancedResult} obj Optional instance to populate.
   * @return {module:model/VirusScanAdvancedResult} The populated <code>VirusScanAdvancedResult</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('CleanResult'))
        obj.cleanResult = ApiClient.convertToType(data['CleanResult'], 'Boolean');
      if (data.hasOwnProperty('ContainsExecutable'))
        obj.containsExecutable = ApiClient.convertToType(data['ContainsExecutable'], 'Boolean');
      if (data.hasOwnProperty('ContainsInvalidFile'))
        obj.containsInvalidFile = ApiClient.convertToType(data['ContainsInvalidFile'], 'Boolean');
      if (data.hasOwnProperty('ContainsScript'))
        obj.containsScript = ApiClient.convertToType(data['ContainsScript'], 'Boolean');
      if (data.hasOwnProperty('ContainsPasswordProtectedFile'))
        obj.containsPasswordProtectedFile = ApiClient.convertToType(data['ContainsPasswordProtectedFile'], 'Boolean');
      if (data.hasOwnProperty('ContainsRestrictedFileFormat'))
        obj.containsRestrictedFileFormat = ApiClient.convertToType(data['ContainsRestrictedFileFormat'], 'Boolean');
      if (data.hasOwnProperty('ContainsMacros'))
        obj.containsMacros = ApiClient.convertToType(data['ContainsMacros'], 'Boolean');
      if (data.hasOwnProperty('ContainsXmlExternalEntities'))
        obj.containsXmlExternalEntities = ApiClient.convertToType(data['ContainsXmlExternalEntities'], 'Boolean');
      if (data.hasOwnProperty('ContainsInsecureDeserialization'))
        obj.containsInsecureDeserialization = ApiClient.convertToType(data['ContainsInsecureDeserialization'], 'Boolean');
      if (data.hasOwnProperty('ContainsHtml'))
        obj.containsHtml = ApiClient.convertToType(data['ContainsHtml'], 'Boolean');
      if (data.hasOwnProperty('ContainsUnsafeArchive'))
        obj.containsUnsafeArchive = ApiClient.convertToType(data['ContainsUnsafeArchive'], 'Boolean');
      if (data.hasOwnProperty('ContainsOleEmbeddedObject'))
        obj.containsOleEmbeddedObject = ApiClient.convertToType(data['ContainsOleEmbeddedObject'], 'Boolean');
      if (data.hasOwnProperty('ContainsUnwantedAction'))
        obj.containsUnwantedAction = ApiClient.convertToType(data['ContainsUnwantedAction'], 'Boolean');
      if (data.hasOwnProperty('VerifiedFileFormat'))
        obj.verifiedFileFormat = ApiClient.convertToType(data['VerifiedFileFormat'], 'String');
      if (data.hasOwnProperty('FoundViruses'))
        obj.foundViruses = ApiClient.convertToType(data['FoundViruses'], [VirusFound]);
      if (data.hasOwnProperty('ContentInformation'))
        obj.contentInformation = AdditionalAdvancedScanInformation.constructFromObject(data['ContentInformation']);
    }
    return obj;
  }

  /**
   * True if the scan contained no viruses, false otherwise
   * @member {Boolean} cleanResult
   */
  exports.prototype.cleanResult = undefined;

  /**
   * True if the scan contained an executable (application code), which can be a significant risk factor
   * @member {Boolean} containsExecutable
   */
  exports.prototype.containsExecutable = undefined;

  /**
   * True if the scan contained an invalid file (such as a PDF that is not a valid PDF, Word Document that is not a valid Word Document, etc.), which can be a significant risk factor
   * @member {Boolean} containsInvalidFile
   */
  exports.prototype.containsInvalidFile = undefined;

  /**
   * True if the scan contained a script (such as a PHP script, Python script, etc.) which can be a significant risk factor
   * @member {Boolean} containsScript
   */
  exports.prototype.containsScript = undefined;

  /**
   * True if the scan contained a password protected or encrypted file, which can be a significant risk factor
   * @member {Boolean} containsPasswordProtectedFile
   */
  exports.prototype.containsPasswordProtectedFile = undefined;

  /**
   * True if the uploaded file is of a type that is not allowed based on the optional restrictFileTypes parameter, false otherwise; if restrictFileTypes is not set, this will always be false
   * @member {Boolean} containsRestrictedFileFormat
   */
  exports.prototype.containsRestrictedFileFormat = undefined;

  /**
   * True if the uploaded file contains embedded Macros of other embedded threats within the document, which can be a significant risk factor
   * @member {Boolean} containsMacros
   */
  exports.prototype.containsMacros = undefined;

  /**
   * True if the uploaded file contains embedded XML External Entity threats of other embedded threats within the document, which can be a significant risk factor
   * @member {Boolean} containsXmlExternalEntities
   */
  exports.prototype.containsXmlExternalEntities = undefined;

  /**
   * True if the uploaded file contains embedded Insecure Deserialization threats of other embedded threats within the document, which can be a significant risk factor
   * @member {Boolean} containsInsecureDeserialization
   */
  exports.prototype.containsInsecureDeserialization = undefined;

  /**
   * True if the uploaded file contains HTML, which can be a significant risk factor
   * @member {Boolean} containsHtml
   */
  exports.prototype.containsHtml = undefined;

  /**
   * True if the uploaded file contains unsafe archive (e.g. zip) content, such as a Zip Bomb, or other configurations of a zip file that could lead to an unsafe extraction
   * @member {Boolean} containsUnsafeArchive
   */
  exports.prototype.containsUnsafeArchive = undefined;

  /**
   * True if the uploaded file contains an OLE embedded object, which can be a significant risk factor
   * @member {Boolean} containsOleEmbeddedObject
   */
  exports.prototype.containsOleEmbeddedObject = undefined;

  /**
   * True if the uploaded file contains an unwanted automatic action, which can be a significant risk factor
   * @member {Boolean} containsUnwantedAction
   */
  exports.prototype.containsUnwantedAction = undefined;

  /**
   * For file format verification-supported file formats, the contents-verified file format of the file.  Null indicates that the file format is not supported for contents verification.  If a Virus or Malware is found, this field will always be set to Null.
   * @member {String} verifiedFileFormat
   */
  exports.prototype.verifiedFileFormat = undefined;

  /**
   * Array of viruses found, if any
   * @member {Array.<module:model/VirusFound>} foundViruses
   */
  exports.prototype.foundViruses = undefined;

  /**
   * Contains additional non-threat content verification information
   * @member {module:model/AdditionalAdvancedScanInformation} contentInformation
   */
  exports.prototype.contentInformation = undefined;


  return exports;

}));
