/*
 * virusapi
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.46
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/VirusFound'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./VirusFound'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudmersiveVirusApiClient) {
      root.CloudmersiveVirusApiClient = {};
    }
    root.CloudmersiveVirusApiClient.WebsiteScanResult = factory(root.CloudmersiveVirusApiClient.ApiClient, root.CloudmersiveVirusApiClient.VirusFound);
  }
}(this, function(ApiClient, VirusFound) {
  'use strict';

  /**
   * The WebsiteScanResult model module.
   * @module model/WebsiteScanResult
   * @version 1.3.1
   */

  /**
   * Constructs a new <code>WebsiteScanResult</code>.
   * Result of running a website scan
   * @alias module:model/WebsiteScanResult
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>WebsiteScanResult</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/WebsiteScanResult} obj Optional instance to populate.
   * @return {module:model/WebsiteScanResult} The populated <code>WebsiteScanResult</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('CleanResult'))
        obj.cleanResult = ApiClient.convertToType(data['CleanResult'], 'Boolean');
      if (data.hasOwnProperty('WebsiteThreatType'))
        obj.websiteThreatType = ApiClient.convertToType(data['WebsiteThreatType'], 'String');
      if (data.hasOwnProperty('FoundViruses'))
        obj.foundViruses = ApiClient.convertToType(data['FoundViruses'], [VirusFound]);
      if (data.hasOwnProperty('WebsiteHttpResponseCode'))
        obj.websiteHttpResponseCode = ApiClient.convertToType(data['WebsiteHttpResponseCode'], 'Number');
    }
    return obj;
  }

  /**
   * True if the scan contained no threats, false otherwise
   * @member {Boolean} cleanResult
   */
  exports.prototype.cleanResult = undefined;

  /**
   * Type of threat returned; can be None, Malware, ForcedDownload or Phishing
   * @member {module:model/WebsiteScanResult.WebsiteThreatTypeEnum} websiteThreatType
   */
  exports.prototype.websiteThreatType = undefined;

  /**
   * Array of viruses found, if any
   * @member {Array.<module:model/VirusFound>} foundViruses
   */
  exports.prototype.foundViruses = undefined;

  /**
   * The remote server URL HTTP reasponse code; useful for debugging issues with scanning; typically if the remote server returns a 200 or 300-series code this means a successful response, while a 400 or 500 series code would represent an error returned from the remote server for the provided URL.
   * @member {Number} websiteHttpResponseCode
   */
  exports.prototype.websiteHttpResponseCode = undefined;



  /**
   * Allowed values for the <code>websiteThreatType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.WebsiteThreatTypeEnum = {
    /**
     * value: "None"
     * @const
     */
    none: "None",

    /**
     * value: "Malware"
     * @const
     */
    malware: "Malware",

    /**
     * value: "Phishing"
     * @const
     */
    phishing: "Phishing",

    /**
     * value: "ForcedDownload"
     * @const
     */
    forcedDownload: "ForcedDownload",

    /**
     * value: "UnableToConnect"
     * @const
     */
    unableToConnect: "UnableToConnect"
  };

  return exports;

}));
