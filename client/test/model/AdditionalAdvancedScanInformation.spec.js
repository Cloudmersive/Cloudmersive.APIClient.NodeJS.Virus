/*
 * virusapi
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.46
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudmersiveVirusApiClient);
  }
}(this, function(expect, CloudmersiveVirusApiClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('AdditionalAdvancedScanInformation', function() {
      beforeEach(function() {
        instance = new CloudmersiveVirusApiClient.AdditionalAdvancedScanInformation();
      });

      it('should create an instance of AdditionalAdvancedScanInformation', function() {
        // TODO: update the code to test AdditionalAdvancedScanInformation
        expect(instance).to.be.a(CloudmersiveVirusApiClient.AdditionalAdvancedScanInformation);
      });

      it('should have the property ContainsJSON (base name: "ContainsJSON")', function() {
        // TODO: update the code to test the property ContainsJSON
        expect(instance).to.have.property('ContainsJSON');
        // expect(instance.ContainsJSON).to.be(expectedValueLiteral);
      });

      it('should have the property ContainsXML (base name: "ContainsXML")', function() {
        // TODO: update the code to test the property ContainsXML
        expect(instance).to.have.property('ContainsXML');
        // expect(instance.ContainsXML).to.be(expectedValueLiteral);
      });

      it('should have the property ContainsImage (base name: "ContainsImage")', function() {
        // TODO: update the code to test the property ContainsImage
        expect(instance).to.have.property('ContainsImage');
        // expect(instance.ContainsImage).to.be(expectedValueLiteral);
      });

      it('should have the property Hash_SHA1 (base name: "Hash_SHA1")', function() {
        // TODO: update the code to test the property Hash_SHA1
        expect(instance).to.have.property('Hash_SHA1');
        // expect(instance.Hash_SHA1).to.be(expectedValueLiteral);
      });

      it('should have the property RelevantSubfileName (base name: "RelevantSubfileName")', function() {
        // TODO: update the code to test the property RelevantSubfileName
        expect(instance).to.have.property('RelevantSubfileName');
        // expect(instance.RelevantSubfileName).to.be(expectedValueLiteral);
      });

      it('should have the property RelevantSubfileHash_SHA1 (base name: "RelevantSubfileHash_SHA1")', function() {
        // TODO: update the code to test the property RelevantSubfileHash_SHA1
        expect(instance).to.have.property('RelevantSubfileHash_SHA1');
        // expect(instance.RelevantSubfileHash_SHA1).to.be(expectedValueLiteral);
      });

      it('should have the property IsAuthenticodeSigned (base name: "IsAuthenticodeSigned")', function() {
        // TODO: update the code to test the property IsAuthenticodeSigned
        expect(instance).to.have.property('IsAuthenticodeSigned');
        // expect(instance.IsAuthenticodeSigned).to.be(expectedValueLiteral);
      });

    });
  });

}));
