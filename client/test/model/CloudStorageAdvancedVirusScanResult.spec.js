/*
 * virusapi
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.46
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudmersiveVirusApiClient);
  }
}(this, function(expect, CloudmersiveVirusApiClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CloudStorageAdvancedVirusScanResult', function() {
      beforeEach(function() {
        instance = new CloudmersiveVirusApiClient.CloudStorageAdvancedVirusScanResult();
      });

      it('should create an instance of CloudStorageAdvancedVirusScanResult', function() {
        // TODO: update the code to test CloudStorageAdvancedVirusScanResult
        expect(instance).to.be.a(CloudmersiveVirusApiClient.CloudStorageAdvancedVirusScanResult);
      });

      it('should have the property successful (base name: "Successful")', function() {
        // TODO: update the code to test the property successful
        expect(instance).to.have.property('successful');
        // expect(instance.successful).to.be(expectedValueLiteral);
      });

      it('should have the property cleanResult (base name: "CleanResult")', function() {
        // TODO: update the code to test the property cleanResult
        expect(instance).to.have.property('cleanResult');
        // expect(instance.cleanResult).to.be(expectedValueLiteral);
      });

      it('should have the property containsExecutable (base name: "ContainsExecutable")', function() {
        // TODO: update the code to test the property containsExecutable
        expect(instance).to.have.property('containsExecutable');
        // expect(instance.containsExecutable).to.be(expectedValueLiteral);
      });

      it('should have the property containsInvalidFile (base name: "ContainsInvalidFile")', function() {
        // TODO: update the code to test the property containsInvalidFile
        expect(instance).to.have.property('containsInvalidFile');
        // expect(instance.containsInvalidFile).to.be(expectedValueLiteral);
      });

      it('should have the property containsScript (base name: "ContainsScript")', function() {
        // TODO: update the code to test the property containsScript
        expect(instance).to.have.property('containsScript');
        // expect(instance.containsScript).to.be(expectedValueLiteral);
      });

      it('should have the property containsPasswordProtectedFile (base name: "ContainsPasswordProtectedFile")', function() {
        // TODO: update the code to test the property containsPasswordProtectedFile
        expect(instance).to.have.property('containsPasswordProtectedFile');
        // expect(instance.containsPasswordProtectedFile).to.be(expectedValueLiteral);
      });

      it('should have the property containsRestrictedFileFormat (base name: "ContainsRestrictedFileFormat")', function() {
        // TODO: update the code to test the property containsRestrictedFileFormat
        expect(instance).to.have.property('containsRestrictedFileFormat');
        // expect(instance.containsRestrictedFileFormat).to.be(expectedValueLiteral);
      });

      it('should have the property containsMacros (base name: "ContainsMacros")', function() {
        // TODO: update the code to test the property containsMacros
        expect(instance).to.have.property('containsMacros');
        // expect(instance.containsMacros).to.be(expectedValueLiteral);
      });

      it('should have the property containsXmlExternalEntities (base name: "ContainsXmlExternalEntities")', function() {
        // TODO: update the code to test the property containsXmlExternalEntities
        expect(instance).to.have.property('containsXmlExternalEntities');
        // expect(instance.containsXmlExternalEntities).to.be(expectedValueLiteral);
      });

      it('should have the property containsInsecureDeserialization (base name: "ContainsInsecureDeserialization")', function() {
        // TODO: update the code to test the property containsInsecureDeserialization
        expect(instance).to.have.property('containsInsecureDeserialization');
        // expect(instance.containsInsecureDeserialization).to.be(expectedValueLiteral);
      });

      it('should have the property containsHtml (base name: "ContainsHtml")', function() {
        // TODO: update the code to test the property containsHtml
        expect(instance).to.have.property('containsHtml');
        // expect(instance.containsHtml).to.be(expectedValueLiteral);
      });

      it('should have the property containsUnsafeArchive (base name: "ContainsUnsafeArchive")', function() {
        // TODO: update the code to test the property containsUnsafeArchive
        expect(instance).to.have.property('containsUnsafeArchive');
        // expect(instance.containsUnsafeArchive).to.be(expectedValueLiteral);
      });

      it('should have the property containsOleEmbeddedObject (base name: "ContainsOleEmbeddedObject")', function() {
        // TODO: update the code to test the property containsOleEmbeddedObject
        expect(instance).to.have.property('containsOleEmbeddedObject');
        // expect(instance.containsOleEmbeddedObject).to.be(expectedValueLiteral);
      });

      it('should have the property verifiedFileFormat (base name: "VerifiedFileFormat")', function() {
        // TODO: update the code to test the property verifiedFileFormat
        expect(instance).to.have.property('verifiedFileFormat');
        // expect(instance.verifiedFileFormat).to.be(expectedValueLiteral);
      });

      it('should have the property foundViruses (base name: "FoundViruses")', function() {
        // TODO: update the code to test the property foundViruses
        expect(instance).to.have.property('foundViruses');
        // expect(instance.foundViruses).to.be(expectedValueLiteral);
      });

      it('should have the property errorDetailedDescription (base name: "ErrorDetailedDescription")', function() {
        // TODO: update the code to test the property errorDetailedDescription
        expect(instance).to.have.property('errorDetailedDescription');
        // expect(instance.errorDetailedDescription).to.be(expectedValueLiteral);
      });

      it('should have the property fileSize (base name: "FileSize")', function() {
        // TODO: update the code to test the property fileSize
        expect(instance).to.have.property('fileSize');
        // expect(instance.fileSize).to.be(expectedValueLiteral);
      });

      it('should have the property contentInformation (base name: "ContentInformation")', function() {
        // TODO: update the code to test the property contentInformation
        expect(instance).to.have.property('contentInformation');
        // expect(instance.contentInformation).to.be(expectedValueLiteral);
      });

    });
  });

}));
