/*
 * virusapi
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.46
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudmersiveVirusApiClient);
  }
}(this, function(expect, CloudmersiveVirusApiClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CloudStorageVirusScanResult', function() {
      beforeEach(function() {
        instance = new CloudmersiveVirusApiClient.CloudStorageVirusScanResult();
      });

      it('should create an instance of CloudStorageVirusScanResult', function() {
        // TODO: update the code to test CloudStorageVirusScanResult
        expect(instance).to.be.a(CloudmersiveVirusApiClient.CloudStorageVirusScanResult);
      });

      it('should have the property Successful (base name: "Successful")', function() {
        // TODO: update the code to test the property Successful
        expect(instance).to.have.property('Successful');
        // expect(instance.Successful).to.be(expectedValueLiteral);
      });

      it('should have the property CleanResult (base name: "CleanResult")', function() {
        // TODO: update the code to test the property CleanResult
        expect(instance).to.have.property('CleanResult');
        // expect(instance.CleanResult).to.be(expectedValueLiteral);
      });

      it('should have the property FoundViruses (base name: "FoundViruses")', function() {
        // TODO: update the code to test the property FoundViruses
        expect(instance).to.have.property('FoundViruses');
        // expect(instance.FoundViruses).to.be(expectedValueLiteral);
      });

      it('should have the property ErrorDetailedDescription (base name: "ErrorDetailedDescription")', function() {
        // TODO: update the code to test the property ErrorDetailedDescription
        expect(instance).to.have.property('ErrorDetailedDescription');
        // expect(instance.ErrorDetailedDescription).to.be(expectedValueLiteral);
      });

      it('should have the property FileSize (base name: "FileSize")', function() {
        // TODO: update the code to test the property FileSize
        expect(instance).to.have.property('FileSize');
        // expect(instance.FileSize).to.be(expectedValueLiteral);
      });

      it('should have the property ContainsContentModerationRejection (base name: "ContainsContentModerationRejection")', function() {
        // TODO: update the code to test the property ContainsContentModerationRejection
        expect(instance).to.have.property('ContainsContentModerationRejection');
        // expect(instance.ContainsContentModerationRejection).to.be(expectedValueLiteral);
      });

      it('should have the property ContainsExecutable (base name: "ContainsExecutable")', function() {
        // TODO: update the code to test the property ContainsExecutable
        expect(instance).to.have.property('ContainsExecutable');
        // expect(instance.ContainsExecutable).to.be(expectedValueLiteral);
      });

      it('should have the property ContainsInvalidFile (base name: "ContainsInvalidFile")', function() {
        // TODO: update the code to test the property ContainsInvalidFile
        expect(instance).to.have.property('ContainsInvalidFile');
        // expect(instance.ContainsInvalidFile).to.be(expectedValueLiteral);
      });

      it('should have the property ContainsScript (base name: "ContainsScript")', function() {
        // TODO: update the code to test the property ContainsScript
        expect(instance).to.have.property('ContainsScript');
        // expect(instance.ContainsScript).to.be(expectedValueLiteral);
      });

      it('should have the property ContainsPasswordProtectedFile (base name: "ContainsPasswordProtectedFile")', function() {
        // TODO: update the code to test the property ContainsPasswordProtectedFile
        expect(instance).to.have.property('ContainsPasswordProtectedFile');
        // expect(instance.ContainsPasswordProtectedFile).to.be(expectedValueLiteral);
      });

      it('should have the property ContainsRestrictedFileFormat (base name: "ContainsRestrictedFileFormat")', function() {
        // TODO: update the code to test the property ContainsRestrictedFileFormat
        expect(instance).to.have.property('ContainsRestrictedFileFormat');
        // expect(instance.ContainsRestrictedFileFormat).to.be(expectedValueLiteral);
      });

      it('should have the property ContainsMacros (base name: "ContainsMacros")', function() {
        // TODO: update the code to test the property ContainsMacros
        expect(instance).to.have.property('ContainsMacros');
        // expect(instance.ContainsMacros).to.be(expectedValueLiteral);
      });

      it('should have the property ContainsXmlExternalEntities (base name: "ContainsXmlExternalEntities")', function() {
        // TODO: update the code to test the property ContainsXmlExternalEntities
        expect(instance).to.have.property('ContainsXmlExternalEntities');
        // expect(instance.ContainsXmlExternalEntities).to.be(expectedValueLiteral);
      });

      it('should have the property ContainsInsecureDeserialization (base name: "ContainsInsecureDeserialization")', function() {
        // TODO: update the code to test the property ContainsInsecureDeserialization
        expect(instance).to.have.property('ContainsInsecureDeserialization');
        // expect(instance.ContainsInsecureDeserialization).to.be(expectedValueLiteral);
      });

      it('should have the property ContainsHtml (base name: "ContainsHtml")', function() {
        // TODO: update the code to test the property ContainsHtml
        expect(instance).to.have.property('ContainsHtml');
        // expect(instance.ContainsHtml).to.be(expectedValueLiteral);
      });

      it('should have the property ContainsUnsafeArchive (base name: "ContainsUnsafeArchive")', function() {
        // TODO: update the code to test the property ContainsUnsafeArchive
        expect(instance).to.have.property('ContainsUnsafeArchive');
        // expect(instance.ContainsUnsafeArchive).to.be(expectedValueLiteral);
      });

      it('should have the property ContainsOleEmbeddedObject (base name: "ContainsOleEmbeddedObject")', function() {
        // TODO: update the code to test the property ContainsOleEmbeddedObject
        expect(instance).to.have.property('ContainsOleEmbeddedObject');
        // expect(instance.ContainsOleEmbeddedObject).to.be(expectedValueLiteral);
      });

      it('should have the property VerifiedFileFormat (base name: "VerifiedFileFormat")', function() {
        // TODO: update the code to test the property VerifiedFileFormat
        expect(instance).to.have.property('VerifiedFileFormat');
        // expect(instance.VerifiedFileFormat).to.be(expectedValueLiteral);
      });

    });
  });

}));
