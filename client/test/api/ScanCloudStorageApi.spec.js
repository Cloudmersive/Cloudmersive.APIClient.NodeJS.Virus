/*
 * virusapi
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.46
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudmersiveVirusApiClient);
  }
}(this, function(expect, CloudmersiveVirusApiClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudmersiveVirusApiClient.ScanCloudStorageApi();
  });

  describe('(package)', function() {
    describe('ScanCloudStorageApi', function() {
      describe('scanCloudStorageGetAsyncJobStatus', function() {
        it('should call scanCloudStorageGetAsyncJobStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for scanCloudStorageGetAsyncJobStatus call and complete the assertions
          /*
          var asyncJobID = "asyncJobID_example";

          instance.scanCloudStorageGetAsyncJobStatus(asyncJobID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloudmersiveVirusApiClient.ScanCloudStorageJobStatusResult);
            expect(data.successful).to.be.a('boolean');
            expect(data.successful).to.be(false);
            expect(data.asyncJobStatus).to.be.a('string');
            expect(data.asyncJobStatus).to.be("");
            expect(data.asyncJobID).to.be.a('string');
            expect(data.asyncJobID).to.be("");
            expect(data.result).to.be.a(CloudmersiveVirusApiClient.CloudStorageAdvancedVirusScanResult);
                  expect(data.result.successful).to.be.a('boolean');
              expect(data.result.successful).to.be(false);
              expect(data.result.cleanResult).to.be.a('boolean');
              expect(data.result.cleanResult).to.be(false);
              expect(data.result.containsExecutable).to.be.a('boolean');
              expect(data.result.containsExecutable).to.be(false);
              expect(data.result.containsInvalidFile).to.be.a('boolean');
              expect(data.result.containsInvalidFile).to.be(false);
              expect(data.result.containsScript).to.be.a('boolean');
              expect(data.result.containsScript).to.be(false);
              expect(data.result.containsPasswordProtectedFile).to.be.a('boolean');
              expect(data.result.containsPasswordProtectedFile).to.be(false);
              expect(data.result.containsRestrictedFileFormat).to.be.a('boolean');
              expect(data.result.containsRestrictedFileFormat).to.be(false);
              expect(data.result.containsMacros).to.be.a('boolean');
              expect(data.result.containsMacros).to.be(false);
              expect(data.result.containsXmlExternalEntities).to.be.a('boolean');
              expect(data.result.containsXmlExternalEntities).to.be(false);
              expect(data.result.containsInsecureDeserialization).to.be.a('boolean');
              expect(data.result.containsInsecureDeserialization).to.be(false);
              expect(data.result.containsHtml).to.be.a('boolean');
              expect(data.result.containsHtml).to.be(false);
              expect(data.result.containsUnsafeArchive).to.be.a('boolean');
              expect(data.result.containsUnsafeArchive).to.be(false);
              expect(data.result.containsOleEmbeddedObject).to.be.a('boolean');
              expect(data.result.containsOleEmbeddedObject).to.be(false);
              expect(data.result.verifiedFileFormat).to.be.a('string');
              expect(data.result.verifiedFileFormat).to.be("");
              {
                let dataCtr = data.result.foundViruses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(CloudmersiveVirusApiClient.CloudStorageVirusFound);
                  expect(data.fileName).to.be.a('string');
                  expect(data.fileName).to.be("");
                  expect(data.virusName).to.be.a('string');
                  expect(data.virusName).to.be("");
  
                        }
              }
              expect(data.result.errorDetailedDescription).to.be.a('string');
              expect(data.result.errorDetailedDescription).to.be("");
              expect(data.result.fileSize).to.be.a('number');
              expect(data.result.fileSize).to.be("0");
              expect(data.result.contentInformation).to.be.a(CloudmersiveVirusApiClient.AdditionalAdvancedScanInformation);
                    expect(data.result.contentInformation.containsJSON).to.be.a('boolean');
                expect(data.result.contentInformation.containsJSON).to.be(false);
                expect(data.result.contentInformation.containsXML).to.be.a('boolean');
                expect(data.result.contentInformation.containsXML).to.be(false);
                expect(data.result.contentInformation.containsImage).to.be.a('boolean');
                expect(data.result.contentInformation.containsImage).to.be(false);
                expect(data.result.contentInformation.hashSHA1).to.be.a('string');
                expect(data.result.contentInformation.hashSHA1).to.be("");
                expect(data.result.contentInformation.relevantSubfileName).to.be.a('string');
                expect(data.result.contentInformation.relevantSubfileName).to.be("");
                expect(data.result.contentInformation.relevantSubfileHashSHA1).to.be.a('string');
                expect(data.result.contentInformation.relevantSubfileHashSHA1).to.be("");
                expect(data.result.contentInformation.isAuthenticodeSigned).to.be.a('boolean');
                expect(data.result.contentInformation.isAuthenticodeSigned).to.be(false);
            expect(data.jobDuration).to.be.a('string');
            expect(data.jobDuration).to.be("");
            expect(data.errorMessage).to.be.a('string');
            expect(data.errorMessage).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('scanCloudStorageScanAwsS3File', function() {
        it('should call scanCloudStorageScanAwsS3File successfully', function(done) {
          // TODO: uncomment, update parameter values for scanCloudStorageScanAwsS3File call and complete the assertions
          /*
          var accessKey = "accessKey_example";
          var secretKey = "secretKey_example";
          var bucketRegion = "bucketRegion_example";
          var bucketName = "bucketName_example";
          var keyName = "keyName_example";
          var opts = {};
          opts.roleArn = "roleArn_example";

          instance.scanCloudStorageScanAwsS3File(accessKey, secretKey, bucketRegion, bucketName, keyName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloudmersiveVirusApiClient.CloudStorageVirusScanResult);
            expect(data.successful).to.be.a('boolean');
            expect(data.successful).to.be(false);
            expect(data.cleanResult).to.be.a('boolean');
            expect(data.cleanResult).to.be(false);
            {
              let dataCtr = data.foundViruses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CloudmersiveVirusApiClient.CloudStorageVirusFound);
                expect(data.fileName).to.be.a('string');
                expect(data.fileName).to.be("");
                expect(data.virusName).to.be.a('string');
                expect(data.virusName).to.be("");

                      }
            }
            expect(data.errorDetailedDescription).to.be.a('string');
            expect(data.errorDetailedDescription).to.be("");
            expect(data.fileSize).to.be.a('number');
            expect(data.fileSize).to.be("0");
            expect(data.containsContentModerationRejection).to.be.a('boolean');
            expect(data.containsContentModerationRejection).to.be(false);
            expect(data.containsExecutable).to.be.a('boolean');
            expect(data.containsExecutable).to.be(false);
            expect(data.containsInvalidFile).to.be.a('boolean');
            expect(data.containsInvalidFile).to.be(false);
            expect(data.containsScript).to.be.a('boolean');
            expect(data.containsScript).to.be(false);
            expect(data.containsPasswordProtectedFile).to.be.a('boolean');
            expect(data.containsPasswordProtectedFile).to.be(false);
            expect(data.containsRestrictedFileFormat).to.be.a('boolean');
            expect(data.containsRestrictedFileFormat).to.be(false);
            expect(data.containsMacros).to.be.a('boolean');
            expect(data.containsMacros).to.be(false);
            expect(data.containsXmlExternalEntities).to.be.a('boolean');
            expect(data.containsXmlExternalEntities).to.be(false);
            expect(data.containsInsecureDeserialization).to.be.a('boolean');
            expect(data.containsInsecureDeserialization).to.be(false);
            expect(data.containsHtml).to.be.a('boolean');
            expect(data.containsHtml).to.be(false);
            expect(data.containsUnsafeArchive).to.be.a('boolean');
            expect(data.containsUnsafeArchive).to.be(false);
            expect(data.containsOleEmbeddedObject).to.be.a('boolean');
            expect(data.containsOleEmbeddedObject).to.be(false);
            expect(data.verifiedFileFormat).to.be.a('string');
            expect(data.verifiedFileFormat).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('scanCloudStorageScanAwsS3FileAdvanced', function() {
        it('should call scanCloudStorageScanAwsS3FileAdvanced successfully', function(done) {
          // TODO: uncomment, update parameter values for scanCloudStorageScanAwsS3FileAdvanced call and complete the assertions
          /*
          var accessKey = "accessKey_example";
          var secretKey = "secretKey_example";
          var bucketRegion = "bucketRegion_example";
          var bucketName = "bucketName_example";
          var keyName = "keyName_example";
          var opts = {};
          opts.roleArn = "roleArn_example";
          opts.allowExecutables = true;
          opts.allowInvalidFiles = true;
          opts.allowScripts = true;
          opts.allowPasswordProtectedFiles = true;
          opts.allowMacros = true;
          opts.allowXmlExternalEntities = true;
          opts.allowInsecureDeserialization = true;
          opts.allowHtml = true;
          opts.allowUnsafeArchives = true;
          opts.allowOleEmbeddedObject = true;
          opts.allowUnwantedAction = true;
          opts.options = "options_example";
          opts.restrictFileTypes = "restrictFileTypes_example";

          instance.scanCloudStorageScanAwsS3FileAdvanced(accessKey, secretKey, bucketRegion, bucketName, keyName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloudmersiveVirusApiClient.CloudStorageAdvancedVirusScanResult);
            expect(data.successful).to.be.a('boolean');
            expect(data.successful).to.be(false);
            expect(data.cleanResult).to.be.a('boolean');
            expect(data.cleanResult).to.be(false);
            expect(data.containsExecutable).to.be.a('boolean');
            expect(data.containsExecutable).to.be(false);
            expect(data.containsInvalidFile).to.be.a('boolean');
            expect(data.containsInvalidFile).to.be(false);
            expect(data.containsScript).to.be.a('boolean');
            expect(data.containsScript).to.be(false);
            expect(data.containsPasswordProtectedFile).to.be.a('boolean');
            expect(data.containsPasswordProtectedFile).to.be(false);
            expect(data.containsRestrictedFileFormat).to.be.a('boolean');
            expect(data.containsRestrictedFileFormat).to.be(false);
            expect(data.containsMacros).to.be.a('boolean');
            expect(data.containsMacros).to.be(false);
            expect(data.containsXmlExternalEntities).to.be.a('boolean');
            expect(data.containsXmlExternalEntities).to.be(false);
            expect(data.containsInsecureDeserialization).to.be.a('boolean');
            expect(data.containsInsecureDeserialization).to.be(false);
            expect(data.containsHtml).to.be.a('boolean');
            expect(data.containsHtml).to.be(false);
            expect(data.containsUnsafeArchive).to.be.a('boolean');
            expect(data.containsUnsafeArchive).to.be(false);
            expect(data.containsOleEmbeddedObject).to.be.a('boolean');
            expect(data.containsOleEmbeddedObject).to.be(false);
            expect(data.verifiedFileFormat).to.be.a('string');
            expect(data.verifiedFileFormat).to.be("");
            {
              let dataCtr = data.foundViruses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CloudmersiveVirusApiClient.CloudStorageVirusFound);
                expect(data.fileName).to.be.a('string');
                expect(data.fileName).to.be("");
                expect(data.virusName).to.be.a('string');
                expect(data.virusName).to.be("");

                      }
            }
            expect(data.errorDetailedDescription).to.be.a('string');
            expect(data.errorDetailedDescription).to.be("");
            expect(data.fileSize).to.be.a('number');
            expect(data.fileSize).to.be("0");
            expect(data.contentInformation).to.be.a(CloudmersiveVirusApiClient.AdditionalAdvancedScanInformation);
                  expect(data.contentInformation.containsJSON).to.be.a('boolean');
              expect(data.contentInformation.containsJSON).to.be(false);
              expect(data.contentInformation.containsXML).to.be.a('boolean');
              expect(data.contentInformation.containsXML).to.be(false);
              expect(data.contentInformation.containsImage).to.be.a('boolean');
              expect(data.contentInformation.containsImage).to.be(false);
              expect(data.contentInformation.hashSHA1).to.be.a('string');
              expect(data.contentInformation.hashSHA1).to.be("");
              expect(data.contentInformation.relevantSubfileName).to.be.a('string');
              expect(data.contentInformation.relevantSubfileName).to.be("");
              expect(data.contentInformation.relevantSubfileHashSHA1).to.be.a('string');
              expect(data.contentInformation.relevantSubfileHashSHA1).to.be("");
              expect(data.contentInformation.isAuthenticodeSigned).to.be.a('boolean');
              expect(data.contentInformation.isAuthenticodeSigned).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('scanCloudStorageScanAzureBlob', function() {
        it('should call scanCloudStorageScanAzureBlob successfully', function(done) {
          // TODO: uncomment, update parameter values for scanCloudStorageScanAzureBlob call and complete the assertions
          /*
          var connectionString = "connectionString_example";
          var containerName = "containerName_example";
          var blobPath = "blobPath_example";

          instance.scanCloudStorageScanAzureBlob(connectionString, containerName, blobPath, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloudmersiveVirusApiClient.CloudStorageVirusScanResult);
            expect(data.successful).to.be.a('boolean');
            expect(data.successful).to.be(false);
            expect(data.cleanResult).to.be.a('boolean');
            expect(data.cleanResult).to.be(false);
            {
              let dataCtr = data.foundViruses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CloudmersiveVirusApiClient.CloudStorageVirusFound);
                expect(data.fileName).to.be.a('string');
                expect(data.fileName).to.be("");
                expect(data.virusName).to.be.a('string');
                expect(data.virusName).to.be("");

                      }
            }
            expect(data.errorDetailedDescription).to.be.a('string');
            expect(data.errorDetailedDescription).to.be("");
            expect(data.fileSize).to.be.a('number');
            expect(data.fileSize).to.be("0");
            expect(data.containsContentModerationRejection).to.be.a('boolean');
            expect(data.containsContentModerationRejection).to.be(false);
            expect(data.containsExecutable).to.be.a('boolean');
            expect(data.containsExecutable).to.be(false);
            expect(data.containsInvalidFile).to.be.a('boolean');
            expect(data.containsInvalidFile).to.be(false);
            expect(data.containsScript).to.be.a('boolean');
            expect(data.containsScript).to.be(false);
            expect(data.containsPasswordProtectedFile).to.be.a('boolean');
            expect(data.containsPasswordProtectedFile).to.be(false);
            expect(data.containsRestrictedFileFormat).to.be.a('boolean');
            expect(data.containsRestrictedFileFormat).to.be(false);
            expect(data.containsMacros).to.be.a('boolean');
            expect(data.containsMacros).to.be(false);
            expect(data.containsXmlExternalEntities).to.be.a('boolean');
            expect(data.containsXmlExternalEntities).to.be(false);
            expect(data.containsInsecureDeserialization).to.be.a('boolean');
            expect(data.containsInsecureDeserialization).to.be(false);
            expect(data.containsHtml).to.be.a('boolean');
            expect(data.containsHtml).to.be(false);
            expect(data.containsUnsafeArchive).to.be.a('boolean');
            expect(data.containsUnsafeArchive).to.be(false);
            expect(data.containsOleEmbeddedObject).to.be.a('boolean');
            expect(data.containsOleEmbeddedObject).to.be(false);
            expect(data.verifiedFileFormat).to.be.a('string');
            expect(data.verifiedFileFormat).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('scanCloudStorageScanAzureBlobAdvanced', function() {
        it('should call scanCloudStorageScanAzureBlobAdvanced successfully', function(done) {
          // TODO: uncomment, update parameter values for scanCloudStorageScanAzureBlobAdvanced call and complete the assertions
          /*
          var connectionString = "connectionString_example";
          var containerName = "containerName_example";
          var blobPath = "blobPath_example";
          var opts = {};
          opts.allowExecutables = true;
          opts.allowInvalidFiles = true;
          opts.allowScripts = true;
          opts.allowPasswordProtectedFiles = true;
          opts.allowMacros = true;
          opts.allowXmlExternalEntities = true;
          opts.allowInsecureDeserialization = true;
          opts.allowHtml = true;
          opts.allowUnsafeArchives = true;
          opts.allowOleEmbeddedObject = true;
          opts.allowUnwantedAction = true;
          opts.options = "options_example";
          opts.restrictFileTypes = "restrictFileTypes_example";

          instance.scanCloudStorageScanAzureBlobAdvanced(connectionString, containerName, blobPath, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloudmersiveVirusApiClient.CloudStorageAdvancedVirusScanResult);
            expect(data.successful).to.be.a('boolean');
            expect(data.successful).to.be(false);
            expect(data.cleanResult).to.be.a('boolean');
            expect(data.cleanResult).to.be(false);
            expect(data.containsExecutable).to.be.a('boolean');
            expect(data.containsExecutable).to.be(false);
            expect(data.containsInvalidFile).to.be.a('boolean');
            expect(data.containsInvalidFile).to.be(false);
            expect(data.containsScript).to.be.a('boolean');
            expect(data.containsScript).to.be(false);
            expect(data.containsPasswordProtectedFile).to.be.a('boolean');
            expect(data.containsPasswordProtectedFile).to.be(false);
            expect(data.containsRestrictedFileFormat).to.be.a('boolean');
            expect(data.containsRestrictedFileFormat).to.be(false);
            expect(data.containsMacros).to.be.a('boolean');
            expect(data.containsMacros).to.be(false);
            expect(data.containsXmlExternalEntities).to.be.a('boolean');
            expect(data.containsXmlExternalEntities).to.be(false);
            expect(data.containsInsecureDeserialization).to.be.a('boolean');
            expect(data.containsInsecureDeserialization).to.be(false);
            expect(data.containsHtml).to.be.a('boolean');
            expect(data.containsHtml).to.be(false);
            expect(data.containsUnsafeArchive).to.be.a('boolean');
            expect(data.containsUnsafeArchive).to.be(false);
            expect(data.containsOleEmbeddedObject).to.be.a('boolean');
            expect(data.containsOleEmbeddedObject).to.be(false);
            expect(data.verifiedFileFormat).to.be.a('string');
            expect(data.verifiedFileFormat).to.be("");
            {
              let dataCtr = data.foundViruses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CloudmersiveVirusApiClient.CloudStorageVirusFound);
                expect(data.fileName).to.be.a('string');
                expect(data.fileName).to.be("");
                expect(data.virusName).to.be.a('string');
                expect(data.virusName).to.be("");

                      }
            }
            expect(data.errorDetailedDescription).to.be.a('string');
            expect(data.errorDetailedDescription).to.be("");
            expect(data.fileSize).to.be.a('number');
            expect(data.fileSize).to.be("0");
            expect(data.contentInformation).to.be.a(CloudmersiveVirusApiClient.AdditionalAdvancedScanInformation);
                  expect(data.contentInformation.containsJSON).to.be.a('boolean');
              expect(data.contentInformation.containsJSON).to.be(false);
              expect(data.contentInformation.containsXML).to.be.a('boolean');
              expect(data.contentInformation.containsXML).to.be(false);
              expect(data.contentInformation.containsImage).to.be.a('boolean');
              expect(data.contentInformation.containsImage).to.be(false);
              expect(data.contentInformation.hashSHA1).to.be.a('string');
              expect(data.contentInformation.hashSHA1).to.be("");
              expect(data.contentInformation.relevantSubfileName).to.be.a('string');
              expect(data.contentInformation.relevantSubfileName).to.be("");
              expect(data.contentInformation.relevantSubfileHashSHA1).to.be.a('string');
              expect(data.contentInformation.relevantSubfileHashSHA1).to.be("");
              expect(data.contentInformation.isAuthenticodeSigned).to.be.a('boolean');
              expect(data.contentInformation.isAuthenticodeSigned).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('scanCloudStorageScanAzureBlobAdvancedBatchJob', function() {
        it('should call scanCloudStorageScanAzureBlobAdvancedBatchJob successfully', function(done) {
          // TODO: uncomment, update parameter values for scanCloudStorageScanAzureBlobAdvancedBatchJob call and complete the assertions
          /*
          var connectionString = "connectionString_example";
          var containerName = "containerName_example";
          var blobPath = "blobPath_example";
          var opts = {};
          opts.allowExecutables = true;
          opts.allowInvalidFiles = true;
          opts.allowScripts = true;
          opts.allowPasswordProtectedFiles = true;
          opts.allowMacros = true;
          opts.allowXmlExternalEntities = true;
          opts.allowInsecureDeserialization = true;
          opts.allowHtml = true;
          opts.allowUnsafeArchives = true;
          opts.allowOleEmbeddedObject = true;
          opts.allowUnwantedAction = true;
          opts.options = "options_example";
          opts.restrictFileTypes = "restrictFileTypes_example";

          instance.scanCloudStorageScanAzureBlobAdvancedBatchJob(connectionString, containerName, blobPath, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloudmersiveVirusApiClient.ScanCloudStorageBatchJobCreateResult);
            expect(data.successful).to.be.a('boolean');
            expect(data.successful).to.be(false);
            expect(data.asyncJobID).to.be.a('string');
            expect(data.asyncJobID).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('scanCloudStorageScanGcpStorageFile', function() {
        it('should call scanCloudStorageScanGcpStorageFile successfully', function(done) {
          // TODO: uncomment, update parameter values for scanCloudStorageScanGcpStorageFile call and complete the assertions
          /*
          var bucketName = "bucketName_example";
          var objectName = "objectName_example";
          var jsonCredentialFile = "/path/to/file.txt";

          instance.scanCloudStorageScanGcpStorageFile(bucketName, objectName, jsonCredentialFile, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloudmersiveVirusApiClient.CloudStorageVirusScanResult);
            expect(data.successful).to.be.a('boolean');
            expect(data.successful).to.be(false);
            expect(data.cleanResult).to.be.a('boolean');
            expect(data.cleanResult).to.be(false);
            {
              let dataCtr = data.foundViruses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CloudmersiveVirusApiClient.CloudStorageVirusFound);
                expect(data.fileName).to.be.a('string');
                expect(data.fileName).to.be("");
                expect(data.virusName).to.be.a('string');
                expect(data.virusName).to.be("");

                      }
            }
            expect(data.errorDetailedDescription).to.be.a('string');
            expect(data.errorDetailedDescription).to.be("");
            expect(data.fileSize).to.be.a('number');
            expect(data.fileSize).to.be("0");
            expect(data.containsContentModerationRejection).to.be.a('boolean');
            expect(data.containsContentModerationRejection).to.be(false);
            expect(data.containsExecutable).to.be.a('boolean');
            expect(data.containsExecutable).to.be(false);
            expect(data.containsInvalidFile).to.be.a('boolean');
            expect(data.containsInvalidFile).to.be(false);
            expect(data.containsScript).to.be.a('boolean');
            expect(data.containsScript).to.be(false);
            expect(data.containsPasswordProtectedFile).to.be.a('boolean');
            expect(data.containsPasswordProtectedFile).to.be(false);
            expect(data.containsRestrictedFileFormat).to.be.a('boolean');
            expect(data.containsRestrictedFileFormat).to.be(false);
            expect(data.containsMacros).to.be.a('boolean');
            expect(data.containsMacros).to.be(false);
            expect(data.containsXmlExternalEntities).to.be.a('boolean');
            expect(data.containsXmlExternalEntities).to.be(false);
            expect(data.containsInsecureDeserialization).to.be.a('boolean');
            expect(data.containsInsecureDeserialization).to.be(false);
            expect(data.containsHtml).to.be.a('boolean');
            expect(data.containsHtml).to.be(false);
            expect(data.containsUnsafeArchive).to.be.a('boolean');
            expect(data.containsUnsafeArchive).to.be(false);
            expect(data.containsOleEmbeddedObject).to.be.a('boolean');
            expect(data.containsOleEmbeddedObject).to.be(false);
            expect(data.verifiedFileFormat).to.be.a('string');
            expect(data.verifiedFileFormat).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('scanCloudStorageScanGcpStorageFileAdvanced', function() {
        it('should call scanCloudStorageScanGcpStorageFileAdvanced successfully', function(done) {
          // TODO: uncomment, update parameter values for scanCloudStorageScanGcpStorageFileAdvanced call and complete the assertions
          /*
          var bucketName = "bucketName_example";
          var objectName = "objectName_example";
          var jsonCredentialFile = "/path/to/file.txt";
          var opts = {};
          opts.allowExecutables = true;
          opts.allowInvalidFiles = true;
          opts.allowScripts = true;
          opts.allowPasswordProtectedFiles = true;
          opts.allowMacros = true;
          opts.allowXmlExternalEntities = true;
          opts.allowInsecureDeserialization = true;
          opts.allowHtml = true;
          opts.allowUnsafeArchives = true;
          opts.allowOleEmbeddedObject = true;
          opts.allowUnwantedAction = true;
          opts.options = "options_example";
          opts.restrictFileTypes = "restrictFileTypes_example";

          instance.scanCloudStorageScanGcpStorageFileAdvanced(bucketName, objectName, jsonCredentialFile, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloudmersiveVirusApiClient.CloudStorageAdvancedVirusScanResult);
            expect(data.successful).to.be.a('boolean');
            expect(data.successful).to.be(false);
            expect(data.cleanResult).to.be.a('boolean');
            expect(data.cleanResult).to.be(false);
            expect(data.containsExecutable).to.be.a('boolean');
            expect(data.containsExecutable).to.be(false);
            expect(data.containsInvalidFile).to.be.a('boolean');
            expect(data.containsInvalidFile).to.be(false);
            expect(data.containsScript).to.be.a('boolean');
            expect(data.containsScript).to.be(false);
            expect(data.containsPasswordProtectedFile).to.be.a('boolean');
            expect(data.containsPasswordProtectedFile).to.be(false);
            expect(data.containsRestrictedFileFormat).to.be.a('boolean');
            expect(data.containsRestrictedFileFormat).to.be(false);
            expect(data.containsMacros).to.be.a('boolean');
            expect(data.containsMacros).to.be(false);
            expect(data.containsXmlExternalEntities).to.be.a('boolean');
            expect(data.containsXmlExternalEntities).to.be(false);
            expect(data.containsInsecureDeserialization).to.be.a('boolean');
            expect(data.containsInsecureDeserialization).to.be(false);
            expect(data.containsHtml).to.be.a('boolean');
            expect(data.containsHtml).to.be(false);
            expect(data.containsUnsafeArchive).to.be.a('boolean');
            expect(data.containsUnsafeArchive).to.be(false);
            expect(data.containsOleEmbeddedObject).to.be.a('boolean');
            expect(data.containsOleEmbeddedObject).to.be(false);
            expect(data.verifiedFileFormat).to.be.a('string');
            expect(data.verifiedFileFormat).to.be("");
            {
              let dataCtr = data.foundViruses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CloudmersiveVirusApiClient.CloudStorageVirusFound);
                expect(data.fileName).to.be.a('string');
                expect(data.fileName).to.be("");
                expect(data.virusName).to.be.a('string');
                expect(data.virusName).to.be("");

                      }
            }
            expect(data.errorDetailedDescription).to.be.a('string');
            expect(data.errorDetailedDescription).to.be("");
            expect(data.fileSize).to.be.a('number');
            expect(data.fileSize).to.be("0");
            expect(data.contentInformation).to.be.a(CloudmersiveVirusApiClient.AdditionalAdvancedScanInformation);
                  expect(data.contentInformation.containsJSON).to.be.a('boolean');
              expect(data.contentInformation.containsJSON).to.be(false);
              expect(data.contentInformation.containsXML).to.be.a('boolean');
              expect(data.contentInformation.containsXML).to.be(false);
              expect(data.contentInformation.containsImage).to.be.a('boolean');
              expect(data.contentInformation.containsImage).to.be(false);
              expect(data.contentInformation.hashSHA1).to.be.a('string');
              expect(data.contentInformation.hashSHA1).to.be("");
              expect(data.contentInformation.relevantSubfileName).to.be.a('string');
              expect(data.contentInformation.relevantSubfileName).to.be("");
              expect(data.contentInformation.relevantSubfileHashSHA1).to.be.a('string');
              expect(data.contentInformation.relevantSubfileHashSHA1).to.be("");
              expect(data.contentInformation.isAuthenticodeSigned).to.be.a('boolean');
              expect(data.contentInformation.isAuthenticodeSigned).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('scanCloudStorageScanSharePointOnlineFile', function() {
        it('should call scanCloudStorageScanSharePointOnlineFile successfully', function(done) {
          // TODO: uncomment, update parameter values for scanCloudStorageScanSharePointOnlineFile call and complete the assertions
          /*
          var clientID = "clientID_example";
          var clientSecret = "clientSecret_example";
          var sharepointDomainName = "sharepointDomainName_example";
          var siteID = "siteID_example";
          var filePath = "filePath_example";
          var opts = {};
          opts.tenantID = "tenantID_example";
          opts.itemID = "itemID_example";

          instance.scanCloudStorageScanSharePointOnlineFile(clientID, clientSecret, sharepointDomainName, siteID, filePath, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloudmersiveVirusApiClient.CloudStorageVirusScanResult);
            expect(data.successful).to.be.a('boolean');
            expect(data.successful).to.be(false);
            expect(data.cleanResult).to.be.a('boolean');
            expect(data.cleanResult).to.be(false);
            {
              let dataCtr = data.foundViruses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CloudmersiveVirusApiClient.CloudStorageVirusFound);
                expect(data.fileName).to.be.a('string');
                expect(data.fileName).to.be("");
                expect(data.virusName).to.be.a('string');
                expect(data.virusName).to.be("");

                      }
            }
            expect(data.errorDetailedDescription).to.be.a('string');
            expect(data.errorDetailedDescription).to.be("");
            expect(data.fileSize).to.be.a('number');
            expect(data.fileSize).to.be("0");
            expect(data.containsContentModerationRejection).to.be.a('boolean');
            expect(data.containsContentModerationRejection).to.be(false);
            expect(data.containsExecutable).to.be.a('boolean');
            expect(data.containsExecutable).to.be(false);
            expect(data.containsInvalidFile).to.be.a('boolean');
            expect(data.containsInvalidFile).to.be(false);
            expect(data.containsScript).to.be.a('boolean');
            expect(data.containsScript).to.be(false);
            expect(data.containsPasswordProtectedFile).to.be.a('boolean');
            expect(data.containsPasswordProtectedFile).to.be(false);
            expect(data.containsRestrictedFileFormat).to.be.a('boolean');
            expect(data.containsRestrictedFileFormat).to.be(false);
            expect(data.containsMacros).to.be.a('boolean');
            expect(data.containsMacros).to.be(false);
            expect(data.containsXmlExternalEntities).to.be.a('boolean');
            expect(data.containsXmlExternalEntities).to.be(false);
            expect(data.containsInsecureDeserialization).to.be.a('boolean');
            expect(data.containsInsecureDeserialization).to.be(false);
            expect(data.containsHtml).to.be.a('boolean');
            expect(data.containsHtml).to.be(false);
            expect(data.containsUnsafeArchive).to.be.a('boolean');
            expect(data.containsUnsafeArchive).to.be(false);
            expect(data.containsOleEmbeddedObject).to.be.a('boolean');
            expect(data.containsOleEmbeddedObject).to.be(false);
            expect(data.verifiedFileFormat).to.be.a('string');
            expect(data.verifiedFileFormat).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('scanCloudStorageScanSharePointOnlineFileAdvanced', function() {
        it('should call scanCloudStorageScanSharePointOnlineFileAdvanced successfully', function(done) {
          // TODO: uncomment, update parameter values for scanCloudStorageScanSharePointOnlineFileAdvanced call and complete the assertions
          /*
          var clientID = "clientID_example";
          var clientSecret = "clientSecret_example";
          var sharepointDomainName = "sharepointDomainName_example";
          var siteID = "siteID_example";
          var opts = {};
          opts.tenantID = "tenantID_example";
          opts.filePath = "filePath_example";
          opts.itemID = "itemID_example";
          opts.allowExecutables = true;
          opts.allowInvalidFiles = true;
          opts.allowScripts = true;
          opts.allowPasswordProtectedFiles = true;
          opts.allowMacros = true;
          opts.allowXmlExternalEntities = true;
          opts.allowInsecureDeserialization = true;
          opts.allowHtml = true;
          opts.allowUnsafeArchives = true;
          opts.allowOleEmbeddedObject = true;
          opts.allowUnwantedAction = true;
          opts.restrictFileTypes = "restrictFileTypes_example";

          instance.scanCloudStorageScanSharePointOnlineFileAdvanced(clientID, clientSecret, sharepointDomainName, siteID, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloudmersiveVirusApiClient.CloudStorageAdvancedVirusScanResult);
            expect(data.successful).to.be.a('boolean');
            expect(data.successful).to.be(false);
            expect(data.cleanResult).to.be.a('boolean');
            expect(data.cleanResult).to.be(false);
            expect(data.containsExecutable).to.be.a('boolean');
            expect(data.containsExecutable).to.be(false);
            expect(data.containsInvalidFile).to.be.a('boolean');
            expect(data.containsInvalidFile).to.be(false);
            expect(data.containsScript).to.be.a('boolean');
            expect(data.containsScript).to.be(false);
            expect(data.containsPasswordProtectedFile).to.be.a('boolean');
            expect(data.containsPasswordProtectedFile).to.be(false);
            expect(data.containsRestrictedFileFormat).to.be.a('boolean');
            expect(data.containsRestrictedFileFormat).to.be(false);
            expect(data.containsMacros).to.be.a('boolean');
            expect(data.containsMacros).to.be(false);
            expect(data.containsXmlExternalEntities).to.be.a('boolean');
            expect(data.containsXmlExternalEntities).to.be(false);
            expect(data.containsInsecureDeserialization).to.be.a('boolean');
            expect(data.containsInsecureDeserialization).to.be(false);
            expect(data.containsHtml).to.be.a('boolean');
            expect(data.containsHtml).to.be(false);
            expect(data.containsUnsafeArchive).to.be.a('boolean');
            expect(data.containsUnsafeArchive).to.be(false);
            expect(data.containsOleEmbeddedObject).to.be.a('boolean');
            expect(data.containsOleEmbeddedObject).to.be(false);
            expect(data.verifiedFileFormat).to.be.a('string');
            expect(data.verifiedFileFormat).to.be("");
            {
              let dataCtr = data.foundViruses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CloudmersiveVirusApiClient.CloudStorageVirusFound);
                expect(data.fileName).to.be.a('string');
                expect(data.fileName).to.be("");
                expect(data.virusName).to.be.a('string');
                expect(data.virusName).to.be("");

                      }
            }
            expect(data.errorDetailedDescription).to.be.a('string');
            expect(data.errorDetailedDescription).to.be("");
            expect(data.fileSize).to.be.a('number');
            expect(data.fileSize).to.be("0");
            expect(data.contentInformation).to.be.a(CloudmersiveVirusApiClient.AdditionalAdvancedScanInformation);
                  expect(data.contentInformation.containsJSON).to.be.a('boolean');
              expect(data.contentInformation.containsJSON).to.be(false);
              expect(data.contentInformation.containsXML).to.be.a('boolean');
              expect(data.contentInformation.containsXML).to.be(false);
              expect(data.contentInformation.containsImage).to.be.a('boolean');
              expect(data.contentInformation.containsImage).to.be(false);
              expect(data.contentInformation.hashSHA1).to.be.a('string');
              expect(data.contentInformation.hashSHA1).to.be("");
              expect(data.contentInformation.relevantSubfileName).to.be.a('string');
              expect(data.contentInformation.relevantSubfileName).to.be("");
              expect(data.contentInformation.relevantSubfileHashSHA1).to.be.a('string');
              expect(data.contentInformation.relevantSubfileHashSHA1).to.be("");
              expect(data.contentInformation.isAuthenticodeSigned).to.be.a('boolean');
              expect(data.contentInformation.isAuthenticodeSigned).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
