/*
 * virusapi
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.46
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudmersiveVirusApiClient);
  }
}(this, function(expect, CloudmersiveVirusApiClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudmersiveVirusApiClient.ScanApi();
  });

  describe('(package)', function() {
    describe('ScanApi', function() {
      describe('scanFile', function() {
        it('should call scanFile successfully', function(done) {
          // TODO: uncomment, update parameter values for scanFile call and complete the assertions
          /*
          var inputFile = "/path/to/file.txt";

          instance.scanFile(inputFile, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloudmersiveVirusApiClient.VirusScanResult);
            expect(data.CleanResult).to.be.a('boolean');
            expect(data.CleanResult).to.be(false);
            {
              let dataCtr = data.FoundViruses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CloudmersiveVirusApiClient.VirusFound);
                expect(data.FileName).to.be.a('string');
                expect(data.FileName).to.be("");
                expect(data.VirusName).to.be.a('string');
                expect(data.VirusName).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('scanFileAdvanced', function() {
        it('should call scanFileAdvanced successfully', function(done) {
          // TODO: uncomment, update parameter values for scanFileAdvanced call and complete the assertions
          /*
          var inputFile = "/path/to/file.txt";
          var opts = {};
          opts.fileName = "fileName_example";
          opts.allowExecutables = true;
          opts.allowInvalidFiles = true;
          opts.allowScripts = true;
          opts.allowPasswordProtectedFiles = true;
          opts.allowMacros = true;
          opts.allowXmlExternalEntities = true;
          opts.allowInsecureDeserialization = true;
          opts.allowHtml = true;
          opts.allowUnsafeArchives = true;
          opts.allowOleEmbeddedObject = true;
          opts.allowUnwantedAction = true;
          opts.options = "options_example";
          opts.restrictFileTypes = "restrictFileTypes_example";

          instance.scanFileAdvanced(inputFile, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloudmersiveVirusApiClient.VirusScanAdvancedResult);
            expect(data.CleanResult).to.be.a('boolean');
            expect(data.CleanResult).to.be(false);
            expect(data.ContainsExecutable).to.be.a('boolean');
            expect(data.ContainsExecutable).to.be(false);
            expect(data.ContainsInvalidFile).to.be.a('boolean');
            expect(data.ContainsInvalidFile).to.be(false);
            expect(data.ContainsScript).to.be.a('boolean');
            expect(data.ContainsScript).to.be(false);
            expect(data.ContainsPasswordProtectedFile).to.be.a('boolean');
            expect(data.ContainsPasswordProtectedFile).to.be(false);
            expect(data.ContainsRestrictedFileFormat).to.be.a('boolean');
            expect(data.ContainsRestrictedFileFormat).to.be(false);
            expect(data.ContainsMacros).to.be.a('boolean');
            expect(data.ContainsMacros).to.be(false);
            expect(data.ContainsXmlExternalEntities).to.be.a('boolean');
            expect(data.ContainsXmlExternalEntities).to.be(false);
            expect(data.ContainsInsecureDeserialization).to.be.a('boolean');
            expect(data.ContainsInsecureDeserialization).to.be(false);
            expect(data.ContainsHtml).to.be.a('boolean');
            expect(data.ContainsHtml).to.be(false);
            expect(data.ContainsUnsafeArchive).to.be.a('boolean');
            expect(data.ContainsUnsafeArchive).to.be(false);
            expect(data.ContainsOleEmbeddedObject).to.be.a('boolean');
            expect(data.ContainsOleEmbeddedObject).to.be(false);
            expect(data.ContainsUnwantedAction).to.be.a('boolean');
            expect(data.ContainsUnwantedAction).to.be(false);
            expect(data.VerifiedFileFormat).to.be.a('string');
            expect(data.VerifiedFileFormat).to.be("");
            {
              let dataCtr = data.FoundViruses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CloudmersiveVirusApiClient.VirusFound);
                expect(data.FileName).to.be.a('string');
                expect(data.FileName).to.be("");
                expect(data.VirusName).to.be.a('string');
                expect(data.VirusName).to.be("");

                      }
            }
            expect(data.ContentInformation).to.be.a(CloudmersiveVirusApiClient.AdditionalAdvancedScanInformation);
                  expect(data.ContentInformation.ContainsJSON).to.be.a('boolean');
              expect(data.ContentInformation.ContainsJSON).to.be(false);
              expect(data.ContentInformation.ContainsXML).to.be.a('boolean');
              expect(data.ContentInformation.ContainsXML).to.be(false);
              expect(data.ContentInformation.ContainsImage).to.be.a('boolean');
              expect(data.ContentInformation.ContainsImage).to.be(false);
              expect(data.ContentInformation.Hash_SHA1).to.be.a('string');
              expect(data.ContentInformation.Hash_SHA1).to.be("");
              expect(data.ContentInformation.RelevantSubfileName).to.be.a('string');
              expect(data.ContentInformation.RelevantSubfileName).to.be("");
              expect(data.ContentInformation.RelevantSubfileHash_SHA1).to.be.a('string');
              expect(data.ContentInformation.RelevantSubfileHash_SHA1).to.be("");
              expect(data.ContentInformation.IsAuthenticodeSigned).to.be.a('boolean');
              expect(data.ContentInformation.IsAuthenticodeSigned).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('scanWebsite', function() {
        it('should call scanWebsite successfully', function(done) {
          // TODO: uncomment, update parameter values for scanWebsite call and complete the assertions
          /*
          var input = new CloudmersiveVirusApiClient.WebsiteScanRequest();
          input.Url = "";

          instance.scanWebsite(input, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloudmersiveVirusApiClient.WebsiteScanResult);
            expect(data.CleanResult).to.be.a('boolean');
            expect(data.CleanResult).to.be(false);
            expect(data.WebsiteThreatType).to.be.a('string');
            expect(data.WebsiteThreatType).to.be("None");
            {
              let dataCtr = data.FoundViruses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CloudmersiveVirusApiClient.VirusFound);
                expect(data.FileName).to.be.a('string');
                expect(data.FileName).to.be("");
                expect(data.VirusName).to.be.a('string');
                expect(data.VirusName).to.be("");

                      }
            }
            expect(data.WebsiteHttpResponseCode).to.be.a('number');
            expect(data.WebsiteHttpResponseCode).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
