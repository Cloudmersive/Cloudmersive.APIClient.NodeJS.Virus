/*
 * virusapi
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.46
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudmersiveVirusApiClient);
  }
}(this, function(expect, CloudmersiveVirusApiClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudmersiveVirusApiClient.ScanApi();

    var defaultClient = CloudmersiveVirusApiClient.ApiClient.instance;

// Configure API key authorization: Apikey
var Apikey = defaultClient.authentications['Apikey'];
Apikey.apiKey = '';
  });

  describe('(package)', function() {
    this.timeout(300000);
    describe('ScanApi', function() {
      describe('scanFile', function() {
        it('should call scanFile successfully', function(done) {
          // TODO: uncomment, update parameter values for scanFile call and complete the assertions
          
          var inputFile = "C:\\temp\\hello.txt";

          console.log('calling scanFileâ€¦'); // proves we didn't end the test early

          instance.scanFile(inputFile, function(error, data, response) {
            console.log('callback hit');
            console.log('status:', response && response.statusCode);
            console.log('data:', data);

            if (error) {
              expect(error).to.be.ok();
              done(error);
              return;
            }

            


            // TODO: update response assertions
            expect(data).to.be.a(CloudmersiveVirusApiClient.VirusScanResult);
            expect(data.cleanResult).to.be.a('boolean');
            expect(data.cleanResult).to.be(true);
            {
              let dataCtr = data.foundViruses;
              
            }

            done();
          });
          
        });
      });
      describe('scanFileAdvanced', function() {
        it('should call scanFileAdvanced successfully', function(done) {
          // TODO: uncomment, update parameter values for scanFileAdvanced call and complete the assertions
          
          var inputFile = "C:\\temp\\hello.txt";
          var opts = {};
          opts.fileName = "fileName_example";
          opts.allowExecutables = true;
          opts.allowInvalidFiles = true;
          opts.allowScripts = true;
          opts.allowPasswordProtectedFiles = true;
          opts.allowMacros = true;
          opts.allowXmlExternalEntities = true;
          opts.allowInsecureDeserialization = true;
          opts.allowHtml = true;
          opts.allowUnsafeArchives = true;
          opts.allowOleEmbeddedObject = true;
          opts.allowUnwantedAction = true;
          opts.options = "";
          opts.restrictFileTypes = "";

          instance.scanFileAdvanced(inputFile, opts, function(error, data, response) {

            console.log('data:', data);


            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloudmersiveVirusApiClient.VirusScanAdvancedResult);
            expect(data.cleanResult).to.be.a('boolean');
            expect(data.cleanResult).to.be(true);
            expect(data.containsExecutable).to.be.a('boolean');
            expect(data.containsExecutable).to.be(false);
            expect(data.containsInvalidFile).to.be.a('boolean');
            expect(data.containsInvalidFile).to.be(false);
            expect(data.containsScript).to.be.a('boolean');
            expect(data.containsScript).to.be(false);
            expect(data.containsPasswordProtectedFile).to.be.a('boolean');
            expect(data.containsPasswordProtectedFile).to.be(false);
            expect(data.containsRestrictedFileFormat).to.be.a('boolean');
            expect(data.containsRestrictedFileFormat).to.be(false);
            expect(data.containsMacros).to.be.a('boolean');
            expect(data.containsMacros).to.be(false);
            expect(data.containsXmlExternalEntities).to.be.a('boolean');
            expect(data.containsXmlExternalEntities).to.be(false);
            expect(data.containsInsecureDeserialization).to.be.a('boolean');
            expect(data.containsInsecureDeserialization).to.be(false);
            expect(data.containsHtml).to.be.a('boolean');
            expect(data.containsHtml).to.be(false);
            expect(data.containsUnsafeArchive).to.be.a('boolean');
            expect(data.containsUnsafeArchive).to.be(false);
            expect(data.containsOleEmbeddedObject).to.be.a('boolean');
            expect(data.containsOleEmbeddedObject).to.be(false);
            expect(data.containsUnwantedAction).to.be.a('boolean');
            expect(data.containsUnwantedAction).to.be(false);
            
            {
              let dataCtr = data.foundViruses;
              
            }
            expect(data.contentInformation).to.be.a(CloudmersiveVirusApiClient.AdditionalAdvancedScanInformation);
                  expect(data.contentInformation.containsJSON).to.be.a('boolean');
              expect(data.contentInformation.containsJSON).to.be(false);
              expect(data.contentInformation.containsXML).to.be.a('boolean');
              expect(data.contentInformation.containsXML).to.be(false);
              expect(data.contentInformation.containsImage).to.be.a('boolean');
              expect(data.contentInformation.containsImage).to.be(false);
              expect(data.contentInformation.hashSHA1).to.be.a('string');
              //expect(data.contentInformation.hashSHA1).to.be("");
              //expect(data.contentInformation.relevantSubfileName).to.be.a('string');
              //expect(data.contentInformation.relevantSubfileName).to.be("");
              //expect(data.contentInformation.relevantSubfileHashSHA1).to.be.a('string');
              //expect(data.contentInformation.relevantSubfileHashSHA1).to.be("");
              expect(data.contentInformation.isAuthenticodeSigned).to.be.a('boolean');
              expect(data.contentInformation.isAuthenticodeSigned).to.be(false);

            done();
          });
          
        });
      });
      describe('scanWebsite', function() {
        it('should call scanWebsite successfully', function(done) {
          // TODO: uncomment, update parameter values for scanWebsite call and complete the assertions
          /*
          var input = new CloudmersiveVirusApiClient.WebsiteScanRequest();
          input.url = "";

          instance.scanWebsite(input, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloudmersiveVirusApiClient.WebsiteScanResult);
            expect(data.cleanResult).to.be.a('boolean');
            expect(data.cleanResult).to.be(false);
            expect(data.websiteThreatType).to.be.a('string');
            expect(data.websiteThreatType).to.be("None");
            {
              let dataCtr = data.foundViruses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CloudmersiveVirusApiClient.VirusFound);
                expect(data.fileName).to.be.a('string');
                expect(data.fileName).to.be("");
                expect(data.virusName).to.be.a('string');
                expect(data.virusName).to.be("");

                      }
            }
            expect(data.websiteHttpResponseCode).to.be.a('number');
            expect(data.websiteHttpResponseCode).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
